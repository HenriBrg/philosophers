Principalement sur les processus et non les thread

https://openclassrooms.com/fr/courses/1513891-la-programmation-systeme-en-c-sous-unix/1513964-avant-propos
--------------------------------------------------------------------------------
Processus : Programme en cours d'exécution avec un env processeur + env mémoire
			Chaque processus dispose d'un espace d'adressage :
				- segment données = variables
				- segment texte = code du programme
				- pile

			Le lancement du processus induit le processeur à gérer l'allocation
			du processeur et la mémoire, grâce à un ordonnanceur (scheduler)
			L'OS est préemptif ou coopératif
				- préemptif = OS garde le contrôle et peut fermer l'application
				- coopératif = OS laisse l'application gérer (+ risqué)

Le PID : 	Process IDentifier
			Numéro unique
			Max : 32 768 (voir /proc/sys/kernel/pid_max)
			Attribué de façon linéaire (17, puis 18, etc ...)

UID :		User IDentifier : user unix
			Valeur entre UID_MIN UID_MAX dans /etc/login.defs
			+ l'UID est bas, + il a de privilèges
			UID réel : UID de l'user ayant lancé le processus
			UID effectif : privilège accordé à l'user
			UID sauvé : copie ancien UID réel avant d'être modifié

			Tous les users sont dans /etc dans le fihicer passwd

			chmod +S : permet à un user d'exécuter un programme avec les privilèges
			de son propriétaire

GID : 		Group IDentifier
			/etc/groups


Le programme initial d'Unix nommé "init" aura le pid = 0
Si pas de programme initial : voir "Panique du noyau"
Après son chargement, le programme initial gère le reste du démarrage :
			- initialisation du système
			- lancement d'un programme de connexion...
			- Lancer les démons (daemon : processus qui est constamment en activité et fournit des services au système.


État du processus : 4 états possibles

			Exécution : R = Running : en cours d'exécution
			Sommeil : S = Sleeping : quand le processus est intérompu au bout d'un quantum de temps
			Arrêt : T = stopped : processus temporairement arrêté par un signal, jusqu'à un signal de redémarrage
			Zombie : Z = Zombie : processus terminé mais le père n'a pas lu le code de retour

Un appel système (ex : read / write) fait entrer le processus en mode noyau

Le PCB (process control block) contient tous les processus associé au programme
			PID PPID UIG GID du processus
			État, fichier ouverts, répertoire, terminal attaché, signaux, infos processeur

Commande "ps" : affiche les processus en cours d'exécution
			-a = tous les users
			-u = détail
			-x = deamon
			-aux

Fork : 		Alloue une "case" dans le PCB
			Copie les informations du block père dans fils (sauf les identificateurs)
			Alloue un PID au fils
			Associe le fils à un segment texte et espace d'adressage (si besoin seulement, segment donnée et pile)
			Retourne un pid_t équivalent à un int

Quand le fils se termine avant le père, il devient zombie
On utilise wait pour cela qui prend en paramètre status, le code de retour du processus (exec par exemple)
Si on utilise pas wait, c'est le processus 1 nommé init qui se charge de libérer l'état zombie
Waitpid attend un fils donné

Les fonctions "system"

Les fonctions Assert/exit/atexit

			- assert(n != 0) est identique que
			- if (*n == NULL)
				  exit(EXIT_FAILURE);
			- atexit check le retour d'une fonction pointée en paramètre

Un système monoprocesseur (et non pas monoprocessus, ne pas confondre processus et processeur),
simule le multitâche en attribuant un temps (un quantum ou temps déterminé à l'avance)
de traitement pour chaque processus

Exemple :
La possibilité de lire l'aide en ligne et d'imprimer à la fois sous Word.
Ce sont deux sous-processus relevant d'un processus qui est associé à l'application Word

Comme chaque processus coûte cher au lancement, sans oublier qu'il va avoir son propre espace
mémoire, la commutation (passage d'un processus à un autre) ainsi que la communication
interprocessus (échange d'informations) seront lourdes à gérer.
